#include<iostream>
#include<queue>
using namespace std;

class map {
public:
	int** matrix;
	bool* visit;
	int num;
	map(int **mx,int n)
	{
		num = n;

		matrix = new int* [n];
		for (int i = 0; i < n; i++)
			matrix[i] = new int[n];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				matrix[i][j] = mx[i][j];

		visit = new bool[n];
		for (int i = 0; i < n; i++)
			visit[i] = false;
	}
   
    void BFS()
    {
        int* adjvex = new int[num];
        queue<int> q;

        int w; //下一个点的坐标
        for (int v = 0; v < num; ++v)
        {
            if (!visit[v])
            {
                visit[v] = true;
                cout << v << " ";
                q.push(v);

                while (!q.empty())
                {
                    int u;
                    u = q.front();
                    q.pop();

                    int k = 0;
                    for (w = 0; w < num; w++)
                    {
                        if (matrix[u][w] == 1)
                        {
                            adjvex[k] = w;
                            k++;
                        }
                    }
                    
                    for (int i = 0; i < k; i++)//所有可达到的点存入队列中 就可以实现DFS
                    {
                        if (visit[adjvex[i]] == false)
                        {
                            visit[adjvex[i]] = true;
                            q.push(adjvex[i]);
                            cout << adjvex[i] << " ";
                        }
                    }
                }
                cout << endl;
            }
        }
    }
};

int main()
{
	int t;
	cin >> t;
	while (t--)
	{
		int n;
		cin >> n;
		int** mx;
		mx = new int* [n];
		for (int i = 0; i < n; i++)
			mx[i] = new int[n];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				cin >> mx[i][j];

		map s(mx,n);
        s.BFS();
		cout << endl;
	}
}
